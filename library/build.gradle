apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.xchengDroid'//必加，com.github.<用户名>(也就是你GtiHub上的地址)
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    resourcePrefix "ev_"
    android {
        lintOptions {
            abortOnError false
        }
    }
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //com.novoda.bintray-release 打包aar上传时，由于依赖其资源无法设置为compileOnly
    compileOnly 'androidx.appcompat:appcompat:1.1.0'
    //可以设置compileOnly
    compileOnly 'androidx.recyclerview:recyclerview:1.1.0'
    //api 'com.wang.avi:library:2.1.3'
    // api 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-andx-14'
    // https://www.jianshu.com/p/03ddb527ac92
    //必须添加 implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    api 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.3'
    //不添加依赖，只需要@aar，因为appcompat设置compileOnly 导致其依赖的support的classpath无法找到，基于运行时
    //api 'com.github.GrenderG:Toasty:1.4.2@aar'
    //下面这样剔除support也可以解决classPath问题,主要是应为因为上面compileOnly导致的
    api("com.github.GrenderG:Toasty:1.4.2", {
        exclude group: 'androidx.appcompat', module: 'appcompat'
    })
}

//---------------------------------------------下面的必加，加上下面的作用是在上传后会带上注释，不然会发现没有注释
// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}